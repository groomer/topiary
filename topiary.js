// Generated by CoffeeScript 1.6.3
(function() {
  var LOREM_IPSUM, SAVE_INTERVAL, createContent, createDocumentViewModel, createRevision, doc;

  SAVE_INTERVAL = 1000;

  LOREM_IPSUM = [
    [
      {
        prompt: "What is your favorite pet?",
        html: "<h1>why mooses are the best (rough draft)</h1><p>I love mooses so much</p>"
      }, {
        prompt: "What is your favorite flower?",
        html: "<h1>a rose by any other name</h1><p>would smell funky</p>"
      }
    ], [
      {
        prompt: "What is your favorite pet?",
        html: "<h1>why meese are the best (final draft)</h1><p>I love meese so much</p>"
      }, {
        prompt: "What is your favorite flower?",
        html: "<h1>a rose by any other name</h1><p>would not smell the same</p>"
      }
    ]
  ];

  ko.bindingHandlers.htmlValue = (function() {
    var assimilator;
    assimilator = function(element, valueAccessor) {
      return function() {
        var modelValue;
        modelValue = valueAccessor();
        return modelValue(element.innerHTML);
      };
    };
    return {
      init: function(element, valueAccessor, allBindingsAccessor) {
        var assimilate;
        assimilate = assimilator(element, valueAccessor);
        ko.utils.registerEventHandler(element, 'blur', assimilate);
        return ko.utils.registerEventHandler(element, 'keyup', assimilate);
      },
      update: function(element, valueAccessor) {
        var value;
        value = ko.utils.unwrapObservable(valueAccessor()) || '';
        if (element.innerHTML !== value) {
          return element.innerHTML = value;
        }
      }
    };
  })();

  createContent = function(_arg) {
    var html, progressMetric, prompt, requiredLength;
    prompt = _arg.prompt, requiredLength = _arg.requiredLength, progressMetric = _arg.metric, html = _arg.html;
    return {
      prompt: prompt,
      requiredLength: requiredLength,
      progressMetric: progressMetric,
      html: ko.observable(html)
    };
  };

  createRevision = function(name, index) {
    return {
      name: name,
      index: index,
      contents: ko.observableArray()
    };
  };

  createDocumentViewModel = function() {
    var cachedContentArray, contentArray, loadRev, needsSave, revisions, saveStatus, shownRevision, throttledNeedsSave,
      _this = this;
    saveStatus = ko.observable("auto-saved.");
    revisions = ko.observableArray();
    shownRevision = ko.observable();
    cachedContentArray = ko.observableArray();
    contentArray = function() {
      return _.map(shownRevision().contents(), function(c) {
        return c.html();
      });
    };
    needsSave = ko.computed(function() {
      if (!cachedContentArray().length) {
        return false;
      }
      if (_.isEqual(contentArray(), cachedContentArray())) {
        return false;
      }
      saveStatus("modified since last save.");
      return true;
    });
    throttledNeedsSave = ko.computed(needsSave).extend({
      throttle: SAVE_INTERVAL
    });
    throttledNeedsSave.subscribe(function(ns) {
      if (!ns) {
        return;
      }
      saveStatus("saving...");
      cachedContentArray(contentArray());
      return setTimeout(function() {
        cachedContentArray(contentArray());
        return saveStatus("auto-saved.");
      }, 2000);
    });
    loadRev = function() {
      shownRevision().contents([]);
      cachedContentArray([]);
      _.each(LOREM_IPSUM[shownRevision().index], function(d, i) {
        var content;
        content = createContent({
          prompt: d.prompt,
          html: d.html,
          index: i
        });
        return shownRevision().contents.push(content);
      });
      return cachedContentArray(contentArray());
    };
    shownRevision.subscribe(loadRev);
    return {
      saveStatus: saveStatus,
      revisions: revisions,
      shownRevision: shownRevision,
      cachedContentArray: cachedContentArray,
      contentArray: contentArray,
      loadRev: loadRev
    };
  };

  doc = createDocumentViewModel();

  doc.revisions([createRevision("Rough Draft", 0), createRevision("Final Draft", 1)]);

  doc.shownRevision(doc.revisions()[0]);

  ko.applyBindings(doc);

}).call(this);
