// Generated by CoffeeScript 1.6.3
(function() {
  (function() {
    var LOREM_IPSUM, SAVE_INTERVAL, createContent, createDocumentViewModel, createRevision, doc;
    SAVE_INTERVAL = 1000;
    LOREM_IPSUM = {
      'Rough Draft': [
        {
          prompt: "What is your favorite pet?",
          html: "<h1>why mooses are the best (rough draft)</h1><p>I love mooses so much</p>"
        }, {
          prompt: "What is your favorite flower?",
          html: "<h1>a rose by any other name</h1><p>would smell funky</p>"
        }
      ],
      'Final Draft': [
        {
          prompt: "What is your favorite pet?",
          html: "<h1>why meese are the best (final draft)</h1><p>I love meese so much</p>"
        }, {
          prompt: "What is your favorite flower?",
          html: "<h1>a rose by any other name</h1><p>would not smell the same</p>"
        }
      ]
    };
    ko.bindingHandlers.htmlValue = (function() {
      var assimilator;
      assimilator = function(element, valueAccessor) {
        return function() {
          var modelValue;
          modelValue = valueAccessor();
          return modelValue(element.innerHTML);
        };
      };
      return {
        init: function(element, valueAccessor, allBindingsAccessor) {
          var assimilate;
          assimilate = assimilator(element, valueAccessor);
          ko.utils.registerEventHandler(element, 'blur', assimilate);
          return ko.utils.registerEventHandler(element, 'keyup', assimilate);
        },
        update: function(element, valueAccessor) {
          var value;
          value = ko.utils.unwrapObservable(valueAccessor()) || '';
          if (element.innerHTML !== value) {
            return element.innerHTML = value;
          }
        }
      };
    })();
    createContent = function(_arg) {
      var html, progressMetric, prompt, requiredLength;
      prompt = _arg.prompt, requiredLength = _arg.requiredLength, progressMetric = _arg.metric, html = _arg.html;
      return {
        prompt: prompt,
        requiredLength: requiredLength,
        progressMetric: progressMetric,
        html: ko.observable(html)
      };
    };
    createRevision = function(name) {
      return {
        name: name,
        contents: ko.observableArray()
      };
    };
    createDocumentViewModel = function() {
      var cachedContentArray, contentArray, loadRevision, needsSave, revisions, saveStatus, shownRevision, throttledNeedsSave;
      saveStatus = ko.observable("auto-saved.");
      revisions = ko.observableArray();
      shownRevision = ko.observable();
      cachedContentArray = ko.observableArray();
      contentArray = function() {
        return _.map(shownRevision().contents(), function(c) {
          return c.html();
        });
      };
      needsSave = ko.computed(function() {
        if (!cachedContentArray().length) {
          return false;
        }
        if (_.isEqual(contentArray(), cachedContentArray())) {
          return false;
        }
        saveStatus("modified since last save.");
        return true;
      });
      throttledNeedsSave = ko.computed(needsSave).extend({
        throttle: SAVE_INTERVAL
      });
      throttledNeedsSave.subscribe(function(ns) {
        if (!ns) {
          return;
        }
        saveStatus("saving...");
        cachedContentArray(contentArray());
        return setTimeout(function() {
          cachedContentArray(contentArray());
          return saveStatus("auto-saved.");
        }, 2000);
      });
      loadRevision = function() {
        var _this = this;
        shownRevision().contents([]);
        cachedContentArray([]);
        _.each(LOREM_IPSUM[shownRevision().name], function(_arg) {
          var content, html, prompt;
          prompt = _arg.prompt, html = _arg.html;
          content = createContent({
            prompt: prompt,
            html: html
          });
          return shownRevision().contents.push(content);
        });
        return cachedContentArray(contentArray());
      };
      shownRevision.subscribe(loadRevision);
      return {
        saveStatus: saveStatus,
        revisions: revisions,
        shownRevision: shownRevision,
        cachedContentArray: cachedContentArray,
        contentArray: contentArray,
        loadRevision: loadRevision
      };
    };
    doc = createDocumentViewModel();
    doc.revisions(_.map(LOREM_IPSUM, function(sections, key) {
      return createRevision(key);
    }));
    doc.shownRevision(_.first(doc.revisions()));
    return ko.applyBindings(doc);
  })();

}).call(this);
